@page "/Festivals"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using System.ComponentModel.DataAnnotations
@inject IFestivalService FestivalService
@inject IArtistService ArtistService
@inject ITicketService TicketService
@inject IReviewService ReviewService
@inject NavigationManager NavigationManager
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<PageTitle>Festivals - ShowTime</PageTitle>

<div class="container">
    <PageHeader Title="üé™ Festival & Lineup Management" 
                Subtitle="Discover and manage amazing music festivals and their lineups" />

    <!-- Search and Filter Section -->
    <SearchFilter Title="Festivals" 
                  OnClearFilters="ClearFilters"
                  ShowResults="@(!string.IsNullOrEmpty(_searchTerm) || !string.IsNullOrEmpty(_selectedLocation) || !string.IsNullOrEmpty(_sortOrder))"
                  ResultsMessage="@GetResultsMessage()">
        <div class="col-md-4">
            <label class="form-label fw-bold">üé™ Search by Name</label>
            <input type="text" @bind="searchTerm" @bind:event="oninput" 
                   class="form-control search-input" placeholder="Enter festival name..." />
        </div>
        <div class="col-md-3">
            <label class="form-label fw-bold">üìç Filter by Location</label>
            <select @bind="selectedLocation" @bind:event="onchange" class="form-select search-input">
                <option value="">All Locations</option>
                @foreach (var location in availableLocations)
                {
                    <option value="@location">@location</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label fw-bold">üìä Sort by</label>
            <select @bind="sortOrder" @bind:event="onchange" class="form-select search-input">
                <option value="">Default Order</option>
                <option value="name_asc">Name A-Z</option>
                <option value="name_desc">Name Z-A</option>
                <option value="date_asc">Date (Earliest First)</option>
                <option value="date_desc">Date (Latest First)</option>
            </select>
        </div>
    </SearchFilter>

    <!-- Add New Festival Form -->
    <FestivalCreateForm OnAddFestival="AddFestival" />

    <!-- Festivals List -->
    <FestivalList AllFestivals="@allFestivals" 
                  FilteredFestivals="@pagedFestivals"
                  EditingFestivalId="@editingFestivalId"
                  OnStartEdit="StartEditFestival"
                  OnSaveEdit="UpdateFestival"
                  OnCancelEdit="CancelEditFestival"
                  OnDeleteFestival="DeleteFestival"
                  OnViewLineup="ShowLineupModal"
                  OnViewTickets="ShowTicketsModal"
                  OnViewMap="ShowMapModal"
                  OnViewReviews="ShowReviewsModal" />

    <div class="festivals-pagination-bar">
        <div class="page-controls">
            <button type="button" class="page-btn" @onclick="OnPrevFestivals" disabled="@(currentPage <= 1)">
                <i class="fa-solid fa-chevron-left"></i>
            </button>
            <span class="page-info">Page @currentPage of @TotalFestivalPages</span>
            <button type="button" class="page-btn" @onclick="OnNextFestivals" disabled="@(currentPage >= TotalFestivalPages)">
                <i class="fa-solid fa-chevron-right"></i>
            </button>
        </div>
    </div>

    <!-- Lineup Modal -->
    <LineupModal IsVisible="@showLineupModal"
                 Festival="@selectedFestival"
                 Artists="@lineupArtists"
                 AllArtists="@allArtists"
                 OnClose="CloseLineupModal"
                 OnAddLineup="AddLineup"
                 OnRemoveLineup="RemoveLineup" />

    <!-- Tickets Modal -->
    <TicketsModal IsVisible="@showTicketsModal"
                  Festival="@selectedFestival"
                  Tickets="@festivalTickets"
                  OnClose="CloseTicketsModal"
                  OnAddTicket="AddTicket"
                  OnUpdateTicket="UpdateTicket"
                  OnDeleteTicket="DeleteTicket" />

    <!-- Map Modal -->
    <FestivalMapModal IsVisible="@showMapModal"
                      Title="@selectedFestival.Name"
                      Subtitle="Festival location on the map"
                      Address="@selectedFestival.Location"
                      OnClose="CloseMapModal" />

    <!-- Reviews Modal -->
    <ReviewsModal IsVisible="@showReviewsModal"
                  Festival="@selectedFestival"
                  Reviews="@festivalReviews"
                  OnClose="CloseReviewsModal"
                  OnAddReview="AddReview"
                  OnDeleteReview="DeleteReview" />
</div>

@code {
    private IList<FestivalGetDto> allFestivals = new List<FestivalGetDto>();
    private IList<FestivalGetDto> filteredFestivals = new List<FestivalGetDto>();
    private IList<FestivalGetDto> pagedFestivals = new List<FestivalGetDto>();
    private IList<string> availableLocations = new List<string>();
    private IList<ArtistGetDto> lineupArtists = new List<ArtistGetDto>();
    private IList<ArtistGetDto> allArtists = new List<ArtistGetDto>();
    private IList<TicketGetDto> festivalTickets = new List<TicketGetDto>();
    private IList<ReviewGetDto> festivalReviews = new List<ReviewGetDto>();
    
    private int? editingFestivalId = null;
    private FestivalGetDto selectedFestival = new();
    private bool showLineupModal = false;
    private bool showTicketsModal = false;
    private bool showMapModal = false;
    private bool showReviewsModal = false;
    
    private string _searchTerm = string.Empty;
    private string searchTerm 
    { 
        get => _searchTerm; 
        set 
        { 
            _searchTerm = value; 
            FilterFestivals(); 
        } 
    }
    
    private string _selectedLocation = string.Empty;
    private string selectedLocation 
    { 
        get => _selectedLocation; 
        set 
        { 
            _selectedLocation = value; 
            FilterFestivals(); 
        } 
    }
    
    private string _sortOrder = string.Empty;
    private string sortOrder 
    { 
        get => _sortOrder; 
        set 
        { 
            _sortOrder = value; 
            FilterFestivals(); 
        } 
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadFestivals();
        await LoadAllArtists();
    }

    private async Task LoadFestivals()
    {
        allFestivals = await FestivalService.GetAllFestivalsAsync();
        UpdateAvailableLocations();
        FilterFestivals();
    }

    private async Task LoadAllArtists()
    {
        allArtists = await ArtistService.GetAllArtistsAsync();
    }

    private void UpdateAvailableLocations()
    {
        availableLocations = allFestivals
            .Select(f => f.Location)
            .Where(l => !string.IsNullOrEmpty(l))
            .Distinct()
            .OrderBy(l => l)
            .ToList();
    }

    private void FilterFestivals()
    {
        var filtered = allFestivals.Where(festival =>
            (string.IsNullOrEmpty(_searchTerm) || 
             festival.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(_selectedLocation) || 
             festival.Location.Equals(_selectedLocation, StringComparison.OrdinalIgnoreCase))
        );

        filteredFestivals = _sortOrder switch
        {
            "name_asc" => filtered.OrderBy(f => f.Name).ToList(),
            "name_desc" => filtered.OrderByDescending(f => f.Name).ToList(),
            "date_asc" => filtered.OrderBy(f => f.StartDate).ToList(),
            "date_desc" => filtered.OrderByDescending(f => f.StartDate).ToList(),
            _ => filtered.ToList()
        };
        ApplyPaging();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        _searchTerm = string.Empty;
        _selectedLocation = string.Empty;
        _sortOrder = string.Empty;
        FilterFestivals();
    }

    private string GetResultsMessage()
    {
        var result = $"Found {filteredFestivals.Count} of {allFestivals.Count} festivals";
        if (!string.IsNullOrEmpty(_sortOrder))
        {
            result += $" | Sorted by {GetSortDescription(_sortOrder)}";
        }
        return result;
    }

    private string GetSortDescription(string sortOrder)
    {
        return sortOrder switch
        {
            "name_asc" => "Name A-Z",
            "name_desc" => "Name Z-A",
            "date_asc" => "Date (Earliest First)",
            "date_desc" => "Date (Latest First)",
            _ => "Default"
        };
    }

    // Pagination
    private int currentPage = 1;
    private int pageSize = 6;

    private int TotalFestivalPages => Math.Max(1, (int)Math.Ceiling((filteredFestivals?.Count ?? 0) / (double)pageSize));

    private void ApplyPaging()
    {
        pagedFestivals = filteredFestivals
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnPrevFestivals()
    {
        if (currentPage > 1)
        {
            currentPage--;
            ApplyPaging();
        }
    }

    private void OnNextFestivals()
    {
        if (currentPage < TotalFestivalPages)
        {
            currentPage++;
            ApplyPaging();
        }
    }

    private async Task AddFestival(FestivalCreateDto festivalDto)
    {
        await FestivalService.AddFestivalAsync(festivalDto);
        await LoadFestivals();
    }

    private void StartEditFestival(FestivalGetDto festival)
    {
        editingFestivalId = festival.Id;
    }

    private void CancelEditFestival()
    {
        editingFestivalId = null;
    }

    private async Task UpdateFestival(FestivalUpdateDto updateDto)
    {
        await FestivalService.UpdateFestivalAsync(updateDto);
        editingFestivalId = null;
        await LoadFestivals();
    }

    private async Task DeleteFestival(int id)
    {
        await FestivalService.DeleteFestivalAsync(id);
        await LoadFestivals();
    }

    private async Task ShowLineupModal(FestivalGetDto festival)
    {
        selectedFestival = festival;
        // Load lineup artists for this festival
        var lineups = await FestivalService.GetLineupsByFestivalIdAsync(festival.Id);
        lineupArtists = lineups.Select(l => new ArtistGetDto
        {
            Id = l.ArtistId,
            Name = l.ArtistName,
            Genre = l.ArtistGenre
        }).ToList();
        showLineupModal = true;
    }

    private void CloseLineupModal()
    {
        showLineupModal = false;
        selectedFestival = new();
        lineupArtists = new List<ArtistGetDto>();
    }

    private async Task AddLineup(LineupCreateDto lineupDto)
    {
        await FestivalService.AddLineupAsync(lineupDto);
        // Refresh lineup data
        await ShowLineupModal(selectedFestival);
    }

    private async Task RemoveLineup(int artistId)
    {
        await FestivalService.DeleteLineupAsync(selectedFestival.Id, artistId);
        // Refresh lineup data
        await ShowLineupModal(selectedFestival);
    }

    private async Task ShowTicketsModal(FestivalGetDto festival)
    {
        selectedFestival = festival;
        // Load tickets for this festival
        festivalTickets = await TicketService.GetTicketsByFestivalIdAsync(festival.Id);
        showTicketsModal = true;
    }

    private void CloseTicketsModal()
    {
        showTicketsModal = false;
        selectedFestival = new();
        festivalTickets = new List<TicketGetDto>();
    }

    private async Task AddTicket(TicketCreateDto ticketDto)
    {
        await TicketService.CreateTicketAsync(ticketDto);
        // Refresh ticket data
        await ShowTicketsModal(selectedFestival);
    }

    private async Task UpdateTicket((int Id, TicketUpdateDto Dto) ticketData)
    {
        await TicketService.UpdateTicketAsync(ticketData.Id, ticketData.Dto);
        // Refresh ticket data
        await ShowTicketsModal(selectedFestival);
    }

    private async Task DeleteTicket(int ticketId)
    {
        await TicketService.DeleteTicketAsync(ticketId);
        // Refresh ticket data
        await ShowTicketsModal(selectedFestival);
    }

    private Task ShowMapModal(FestivalGetDto festival)
    {
        selectedFestival = festival;
        showMapModal = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void CloseMapModal()
    {
        showMapModal = false;
        selectedFestival = new();
    }

    private async Task ShowReviewsModal(FestivalGetDto festival)
    {
        selectedFestival = festival;
        festivalReviews = await ReviewService.GetReviewsForFestivalAsync(festival.Id);
        showReviewsModal = true;
    }

    private void CloseReviewsModal()
    {
        showReviewsModal = false;
        selectedFestival = new();
        festivalReviews = new List<ReviewGetDto>();
    }

    private async Task AddReview(ReviewCreateDto dto)
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (int.TryParse(userIdClaim, out var userId))
        {
            await ReviewService.AddReviewAsync(userId, dto);
            festivalReviews = await ReviewService.GetReviewsForFestivalAsync(selectedFestival.Id);
            StateHasChanged();
        }
    }

    private async Task DeleteReview(int reviewId)
    {
        if (reviewId > 0)
        {
            await ReviewService.DeleteReviewAsync(reviewId);
            festivalReviews = await ReviewService.GetReviewsForFestivalAsync(selectedFestival.Id);
            StateHasChanged();
        }
    }
}