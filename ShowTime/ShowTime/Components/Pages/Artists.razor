@page "/Artists"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IArtistService ArtistService
@rendermode InteractiveServer


<h3>Add new artist</h3>
<EditForm Model="newArtist" OnValidSubmit="AddArtist" FormName="AddArtistForm">
    <label>Name: </label>
    <InputText @bind-Value="newArtist.Name" class="form-control"/>

    <label>Genre: </label>
    <InputText @bind-Value="newArtist.Genre" class="form-control" />

    <label>Image: </label>
    <InputText @bind-Value="newArtist.Image" class="form-control" />

    <button class="btn btn-primary"> Add Band</button>
</EditForm>


<h3>Artists</h3>

@if (artists.Count == 0)
{
    <p>No artists registered!</p>
}
else
{
    <div class="row">
        @foreach (var artist in artists)
        {
            <div class="col-md-4">
                <div class="card mb-3">
                    <img class="card-img-top" src="@artist.Image" alt="@artist.Name" />
                    <div class="card-body">
                        <h5 class="card-title">@artist.Name</h5>
                        <p class="card-text"><strong>Genre:</strong> @artist.Genre</p>
                        
                        @if (editingArtistId == artist.Id)
                        {
                            <div class="mt-3">
                                <h6>Edit Artist</h6>
                                <EditForm Model="updateArtist" OnValidSubmit="UpdateArtist" FormName="@($"UpdateArtistForm_{artist.Id}")">
                                    <div class="mb-2">
                                        <label>Name: </label>
                                        <InputText @bind-Value="updateArtist.Name" class="form-control form-control-sm"/>
                                    </div>
                                    <div class="mb-2">
                                        <label>Genre: </label>
                                        <InputText @bind-Value="updateArtist.Genre" class="form-control form-control-sm" />
                                    </div>
                                    <div class="mb-2">
                                        <label>Image: </label>
                                        <InputText @bind-Value="updateArtist.Image" class="form-control form-control-sm" />
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-success btn-sm">Save</button>
                                        <button type="button" class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                                    </div>
                                </EditForm>
                            </div>
                        }
                    </div>
                    <div class="card-footer d-flex gap-2">
                        @if (editingArtistId != artist.Id)
                        {
                            <button class="btn btn-warning btn-sm" @onclick="() => StartEdit(artist)">Edit</button>
                        }
                        <button class="btn btn-danger btn-sm" @onclick="async () => await DeleteArtist(artist.Id)">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}



@code {
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();
    private int? editingArtistId = null;

    [SupplyParameterFromForm] 
    private ArtistCreateDto newArtist { get; set; } = new();

    private ArtistUpdateDto updateArtist { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private async Task AddArtist()
    {
        await ArtistService.AddArtistAsync(newArtist);
        newArtist = new();
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private void StartEdit(ArtistGetDto artist)
    {
        editingArtistId = artist.Id;
        updateArtist = new ArtistUpdateDto
        {
            Id = artist.Id,
            Name = artist.Name,
            Genre = artist.Genre,
            Image = artist.Image
        };
    }

    private void CancelEdit()
    {
        editingArtistId = null;
        updateArtist = new();
    }

    private async Task UpdateArtist()
    {
        await ArtistService.UpdateArtistAsync(updateArtist);
        editingArtistId = null;
        updateArtist = new();
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private async Task DeleteArtist(int id)
    {
        await ArtistService.DeleteArtistAsync(id);
        artists = await ArtistService.GetAllArtistsAsync();
    }
}
