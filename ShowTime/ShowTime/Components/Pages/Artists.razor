@page "/Artists"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using System.ComponentModel.DataAnnotations
@inject IArtistService ArtistService
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [StreamRendering]

<PageTitle>Artists - ShowTime</PageTitle>

<div class="container">
    <PageHeader Title="🎵 Artist Management" 
                Subtitle="Discover amazing artists performing at our festivals" />
    
    <!-- Search and Filter Section -->
    <SearchFilter Title="Artists" 
                  OnClearFilters="ClearFilters"
                  ShowResults="@(!string.IsNullOrEmpty(_searchTerm) || !string.IsNullOrEmpty(_selectedGenre) || !string.IsNullOrEmpty(_sortOrder))"
                  ResultsMessage="@GetResultsMessage()">
        <div class="col-md-4">
            <label class="form-label fw-bold">🎤 Search by Name</label>
            <input type="text" @bind="searchTerm" @bind:event="oninput" 
                   class="form-control search-input" placeholder="Enter artist name..." />
        </div>
        <div class="col-md-3">
            <label class="form-label fw-bold">🎵 Filter by Genre</label>
            <select @bind="selectedGenre" @bind:event="onchange" class="form-select search-input">
                <option value="">All Genres</option>
                @foreach (var genre in availableGenres)
                {
                    <option value="@genre">@genre</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label fw-bold">📊 Sort by Name</label>
            <select @bind="sortOrder" @bind:event="onchange" class="form-select search-input">
                <option value="">Default Order</option>
                <option value="asc">A-Z (Ascending)</option>
                <option value="desc">Z-A (Descending)</option>
            </select>
        </div>
    </SearchFilter>

    <!-- Add New Artist Form -->
    <ArtistCreateForm OnAddArtist="AddArtist" />

    <!-- Artists List -->
    <ArtistList AllArtists="@allArtists" 
                FilteredArtists="@pagedArtists"
                EditingArtistId="@editingArtistId"
                OnStartEdit="StartEdit"
                OnSaveEdit="UpdateArtist"
                OnCancelEdit="CancelEdit"
                OnDeleteArtist="DeleteArtist" />

    <div class="artists-pagination-bar">
        <div class="page-controls">
            <button type="button" class="page-btn" @onclick="GoPrev" disabled="@(currentPage <= 1)">
                <i class="fa-solid fa-chevron-left"></i>
            </button>
            <span class="page-info">Page @currentPage of @TotalPages</span>
            <button type="button" class="page-btn" @onclick="GoNext" disabled="@(currentPage >= TotalPages)">
                <i class="fa-solid fa-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

@code {
    private IList<ArtistGetDto> allArtists = new List<ArtistGetDto>();
    private IList<ArtistGetDto> filteredArtists = new List<ArtistGetDto>();
    private IList<ArtistGetDto> pagedArtists = new List<ArtistGetDto>();
    private IList<string> availableGenres = new List<string>();
    private int? editingArtistId = null;
    
    private string _searchTerm = string.Empty;
    private string searchTerm 
    { 
        get => _searchTerm; 
        set 
        { 
            _searchTerm = value; 
            FilterArtists(); 
        } 
    }
    
    private string _selectedGenre = string.Empty;
    private string selectedGenre 
    { 
        get => _selectedGenre; 
        set 
        { 
            _selectedGenre = value; 
            FilterArtists(); 
        } 
    }
    
    private string _sortOrder = string.Empty;
    private string sortOrder 
    { 
        get => _sortOrder; 
        set 
        { 
            _sortOrder = value; 
            FilterArtists(); 
        } 
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadArtists();
    }

    private async Task LoadArtists()
    {
        allArtists = await ArtistService.GetAllArtistsAsync();
        UpdateAvailableGenres();
        FilterArtists();
    }

    private void UpdateAvailableGenres()
    {
        availableGenres = allArtists
            .Select(a => a.Genre)
            .Where(g => !string.IsNullOrEmpty(g))
            .Distinct()
            .OrderBy(g => g)
            .ToList();
    }

    private void FilterArtists()
    {
        var filtered = allArtists.Where(artist =>
            (string.IsNullOrEmpty(_searchTerm) || 
             artist.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(_selectedGenre) || 
             artist.Genre.Equals(_selectedGenre, StringComparison.OrdinalIgnoreCase))
        );

        filteredArtists = _sortOrder switch
        {
            "asc" => filtered.OrderBy(a => a.Name).ToList(),
            "desc" => filtered.OrderByDescending(a => a.Name).ToList(),
            _ => filtered.ToList()
        };
        ApplyPaging();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        _searchTerm = string.Empty;
        _selectedGenre = string.Empty;
        _sortOrder = string.Empty;
        FilterArtists();
    }

    private string GetResultsMessage()
    {
        var result = $"Found {filteredArtists.Count} of {allArtists.Count} artists";
        if (!string.IsNullOrEmpty(_sortOrder))
        {
            result += $" | Sorted {(_sortOrder == "asc" ? "A-Z" : "Z-A")}";
        }
        return result;
    }

    // Pagination
    private int currentPage = 1;
    private int pageSize = 6;

    private int TotalPages => Math.Max(1, (int)Math.Ceiling((filteredArtists?.Count ?? 0) / (double)pageSize));

    private void ApplyPaging()
    {
        pagedArtists = filteredArtists
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void GoPrev()
    {
        if (currentPage > 1)
        {
            currentPage--;
            ApplyPaging();
        }
    }

    private void GoNext()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
            ApplyPaging();
        }
    }

    private async Task AddArtist(ArtistCreateDto artistDto)
    {
        await ArtistService.AddArtistAsync(artistDto);
        await LoadArtists();
    }

    private void StartEdit(ArtistGetDto artist)
    {
        editingArtistId = artist.Id;
    }

    private void CancelEdit()
    {
        editingArtistId = null;
    }

    private async Task UpdateArtist(ArtistUpdateDto updateDto)
    {
        await ArtistService.UpdateArtistAsync(updateDto);
        editingArtistId = null;
        await LoadArtists();
    }

    private async Task DeleteArtist(int id)
    {
        await ArtistService.DeleteArtistAsync(id);
        await LoadArtists();
    }
}