@page "/tickets"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject ITicketService TicketService
@inject IFestivalService FestivalService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>@(isAdmin ? "Manage Tickets" : "Available Tickets") - ShowTime</PageTitle>

<div class="container">
    <PageHeader Title="ðŸŽ« Ticket Management" 
                Subtitle="@(isAdmin ? "Manage all festival tickets and pricing" : "Browse available tickets for upcoming festivals")" />

    <!-- Add New Ticket Section -->
    <TicketCreateForm AllFestivals="@allFestivals" OnAddTicket="@HandleAddTicket" />

    <!-- Success/Error Messages -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible">
            <i class="fas fa-exclamation-triangle"></i> @errorMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible">
            <i class="fas fa-check-circle"></i> @successMessage
        </div>
    }

    <!-- Tickets List Section -->
    <TicketList DisplayTickets="@displayTickets" 
                AllFestivals="@allFestivals"
                IsAdmin="@isAdmin"
                EditingTicketId="@editingTicketId"
                OnStartEdit="@HandleStartEdit"
                OnSaveEdit="@HandleSaveEdit"
                OnCancelEdit="@HandleCancelEdit"
                OnDeleteTicket="@HandleDeleteTicket" />
</div>

@code {
    private bool isAdmin = false;
    
    private IList<TicketGetDto> displayTickets = new List<TicketGetDto>();
    private IList<FestivalGetDto> allFestivals = new List<FestivalGetDto>();
    
    private int? editingTicketId = null;
    private TicketUpdateDto updateTicket = new();
    
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CheckUserRole();
        await LoadData();
    }
    
    private async Task CheckUserRole()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity?.IsAuthenticated == true)
        {
            isAdmin = user.IsInRole("Administrator");
        }
    }
    
    private async Task LoadData()
    {
        try
        {
            allFestivals = (await FestivalService.GetAllFestivalsAsync()).ToList();
            var allTickets = (await TicketService.GetAllTicketsAsync()).ToList();
            
            if (isAdmin)
            {
                displayTickets = allTickets;
            }
            else
            {
                // For regular users, only show tickets for upcoming festivals
                var upcomingFestivalIds = allFestivals
                    .Where(f => f.StartDate > DateTime.Now)
                    .Select(f => f.Id)
                    .ToHashSet();
                
                displayTickets = allTickets
                    .Where(t => upcomingFestivalIds.Contains(t.FestivalId))
                    .ToList();
            }
            
            ClearMessages();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tickets: {ex.Message}";
        }
    }
    
    private async Task HandleAddTicket(TicketCreateDto newTicket)
    {
        try
        {
            ClearMessages();
            
            if (newTicket.FestivalId <= 0)
            {
                errorMessage = "Please select a festival.";
                return;
            }
            
            await TicketService.CreateTicketAsync(newTicket);
            successMessage = "Ticket added successfully!";
            
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding ticket: {ex.Message}";
        }
    }
    
    private void HandleStartEdit(TicketGetDto ticket)
    {
        editingTicketId = ticket.Id;
        updateTicket = new TicketUpdateDto
        {
            Type = ticket.Type,
            Price = ticket.Price
        };
        ClearMessages();
    }
    
    private async Task HandleSaveEdit(TicketUpdateDto updatedTicket)
    {
        if (editingTicketId.HasValue)
        {
            try
            {
                await TicketService.UpdateTicketAsync(editingTicketId.Value, updatedTicket);
                successMessage = "Ticket updated successfully!";
                HandleCancelEdit();
                await LoadData();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error updating ticket: {ex.Message}";
            }
        }
    }
    
    private void HandleCancelEdit()
    {
        editingTicketId = null;
        updateTicket = new TicketUpdateDto();
        ClearMessages();
    }
    
    private async Task HandleDeleteTicket(int ticketId)
    {
        try
        {
            await TicketService.DeleteTicketAsync(ticketId);
            successMessage = "Ticket deleted successfully!";
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting ticket: {ex.Message}";
        }
    }
    
    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }
} 