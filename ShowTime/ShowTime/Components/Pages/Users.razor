@page "/Users"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.DataAccess.Models
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Users - ShowTime</PageTitle>

<div class="container">
    <PageHeader Title="ðŸ‘¥ User Management" Subtitle="Manage system users and their permissions" />

    <!-- Search and Filter Section -->
    <SearchFilter Title="Users" OnClearFilters="@ClearFilters" 
                  ShowResults="@(!string.IsNullOrEmpty(selectedEmail) || !string.IsNullOrEmpty(selectedRole))"
                  ResultsMessage="@($"Found {filteredUsers.Count} of {allUsers.Count} users")">
        <div class="col-md-6">
            <label class="form-label fw-bold">ðŸ“§ Filter by Email</label>
            <select @bind="selectedEmail" @bind:after="FilterUsers" class="form-select search-input">
                <option value="">All Email Addresses</option>
                @foreach (var email in availableEmails)
                {
                    <option value="@email">@email</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label class="form-label fw-bold">ðŸ‘¤ Filter by Role</label>
            <select @bind="selectedRole" @bind:after="FilterUsers" class="form-select search-input">
                <option value="">All Roles</option>
                <option value="0">Administrator</option>
                <option value="1">Regular User</option>
            </select>
        </div>
    </SearchFilter>

    <!-- Users List Section -->
    <UserList AllUsers="@allUsers" 
              FilteredUsers="@filteredUsers"
              EditingUserId="@editingUserId"
              OnStartEdit="@HandleStartEdit"
              OnSaveEdit="@HandleSaveEdit"
              OnCancelEdit="@HandleCancelEdit"
              OnDelete="@HandleDeleteUser" />
</div>

@code {
    private IList<User> allUsers = new List<User>();
    private IList<User> filteredUsers = new List<User>();
    private IList<string> availableEmails = new List<string>();
    private int? editingUserId = null;
    
    private string selectedEmail = string.Empty;
    private string selectedRole = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            allUsers = await UserService.GetAllUsersAsync();
            availableEmails = allUsers.Select(u => u.Email).Distinct().OrderBy(e => e).ToList();
            FilterUsers();
        }
        catch (Exception ex)
        {
            // Handle error - in production, you'd want proper logging
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private void FilterUsers()
    {
        var filtered = allUsers.Where(user =>
            (string.IsNullOrEmpty(selectedEmail) || 
             user.Email.Equals(selectedEmail, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedRole) || 
             user.Role.ToString() == selectedRole)
        );

        filteredUsers = filtered.OrderBy(u => u.Email).ToList();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        selectedEmail = string.Empty;
        selectedRole = string.Empty;
        FilterUsers();
    }

    private void HandleStartEdit(User user)
    {
        editingUserId = user.Id;
    }

    private void HandleCancelEdit()
    {
        editingUserId = null;
    }

    private async Task HandleSaveEdit(User user)
    {
        try
        {
            await UserService.UpdateUserRoleAsync(user.Id, (Role)user.Role);
            editingUserId = null;
            await LoadUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating user: {ex.Message}");
        }
    }

    private async Task HandleDeleteUser(int id)
    {
        try
        {
            await UserService.DeleteUserAsync(id);
            await LoadUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting user: {ex.Message}");
        }
    }
} 