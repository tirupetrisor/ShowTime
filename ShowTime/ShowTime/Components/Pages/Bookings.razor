@page "/bookings"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.DataAccess.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Web
@inject IBookingService BookingService
@inject IFestivalService FestivalService
@inject ITicketService TicketService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>@(isAdmin ? "Manage All Bookings" : "My Bookings") - ShowTime</PageTitle>

<div class="container">
    <PageHeader Title="üìã Booking Management" 
                Subtitle="@(isAdmin ? "Manage all customer bookings and reservations" : "View and manage your festival bookings")" />

    <!-- Search and Filter Section -->
    <SearchFilter Title="Bookings" 
                  OnClearFilters="ClearFilters"
                  ShowResults="@(!string.IsNullOrEmpty(SelectedUser) || !string.IsNullOrEmpty(SelectedFestival) || !string.IsNullOrEmpty(SelectedTicketType) || !string.IsNullOrEmpty(SortOrder))"
                  ResultsMessage="@GetResultsMessage()">
        @if (isAdmin)
        {
            <div class="col-md-3">
                <label class="form-label fw-bold">üë§ Filter by User</label>
                <select @bind="SelectedUser" @bind:after="FilterBookings" class="form-select search-input">
                    <option value="">All Users</option>
                    @foreach (var user in availableUsers)
                    {
                        <option value="@user.Email">@user.Email</option>
                    }
                </select>
            </div>
        }
        <div class="col-md-@(isAdmin ? "3" : "4")">
            <label class="form-label fw-bold">üé™ Filter by Festival</label>
            <select @bind="SelectedFestival" @bind:after="FilterBookings" class="form-select search-input">
                <option value="">All Festivals</option>
                @foreach (var festival in availableFestivals)
                {
                    <option value="@festival.Name">@festival.Name</option>
                }
            </select>
        </div>
        <div class="col-md-@(isAdmin ? "2" : "3")">
            <label class="form-label fw-bold">üéüÔ∏è Filter by Ticket Type</label>
            <select @bind="SelectedTicketType" @bind:after="FilterBookings" class="form-select search-input">
                <option value="">All Ticket Types</option>
                @foreach (var ticketType in availableTicketTypes)
                {
                    <option value="@ticketType">@ticketType</option>
                }
            </select>
        </div>
        <div class="col-md-@(isAdmin ? "2" : "3")">
            <label class="form-label fw-bold">üìä Sort by</label>
            <select @bind="SortOrder" @bind:after="FilterBookings" class="form-select search-input">
                <option value="">Default Order</option>
                <option value="date_asc">Date (Earliest First)</option>
                <option value="date_desc">Date (Latest First)</option>
                <option value="festival_asc">Festival A-Z</option>
                <option value="festival_desc">Festival Z-A</option>
                <option value="price_asc">Price (Low to High)</option>
                <option value="price_desc">Price (High to Low)</option>
            </select>
        </div>
    </SearchFilter>

    @if (isAdmin)
    {
        <!-- Add New Booking Form (Admins only) -->
        <BookingCreateForm NewBooking="@newBooking"
                           AllFestivals="@allFestivals"
                           AvailableTickets="@availableTickets"
                           AllUsers="@allUsers"
                           IsAdmin="@isAdmin"
                           OnAddBooking="AddBooking"
                           OnFestivalChanged="OnFestivalChanged" />
    }

    <!-- Bookings List -->
    <BookingList DisplayBookings="@displayBookings"
                 FilteredBookings="@pagedBookings"
                 IsAdmin="@isAdmin"
                 EditingBookingId="@editingBookingId"
                 FestivalTickets="@festivalTickets"
                 OnStartEdit="HandleStartEdit"
                 OnSaveEdit="HandleSaveEdit"
                 OnCancelEdit="HandleCancelEdit"
                 OnDeleteBooking="DeleteBooking" />

    <div class="bookings-pagination-bar">
        <div class="page-controls">
            <button type="button" class="page-btn" @onclick="GoPrev" disabled="@(currentPage <= 1)">
                <i class="fa-solid fa-chevron-left"></i>
            </button>
            <span class="page-info">Page @currentPage of @TotalPages</span>
            <button type="button" class="page-btn" @onclick="GoNext" disabled="@(currentPage >= TotalPages)">
                <i class="fa-solid fa-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

@code {
    private bool isAdmin = false;
    private IList<BookingGetDto> displayBookings = new List<BookingGetDto>();
    private IList<BookingGetDto> filteredBookings = new List<BookingGetDto>();
    private IList<BookingGetDto> uniqueFilteredBookings = new List<BookingGetDto>();
    private IList<BookingGetDto> pagedBookings = new List<BookingGetDto>();
    private IList<FestivalGetDto> allFestivals = new List<FestivalGetDto>();
    private IList<FestivalGetDto> availableFestivals = new List<FestivalGetDto>();
    private IList<TicketGetDto> availableTickets = new List<TicketGetDto>();
    private IList<User> allUsers = new List<User>();
    private IList<User> availableUsers = new List<User>();
    private IList<string> availableTicketTypes = new List<string>();
    
    private BookingCreateDto newBooking = new();
    
    // Edit functionality variables
    private int? editingBookingId = null;
    private Dictionary<int, IList<TicketGetDto>> festivalTickets = new Dictionary<int, IList<TicketGetDto>>();
    
    private string SelectedUser = string.Empty;
    private string SelectedFestival = string.Empty;
    private string SelectedTicketType = string.Empty;
    private string SortOrder = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CheckUserRole();
        await LoadData();
    }
    
    private async Task CheckUserRole()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity.IsAuthenticated)
        {
            isAdmin = user.IsInRole("Administrator");
        }
    }

    private async Task LoadData()
    {
        allFestivals = await FestivalService.GetAllFestivalsAsync();
        availableFestivals = allFestivals.ToList();
        
        if (isAdmin)
        {
            displayBookings = await BookingService.GetAllBookingsAsync();
            allUsers = await UserService.GetAllUsersAsync();
            availableUsers = allUsers.ToList();
        }
        else
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userIdClaim) && int.TryParse(userIdClaim, out int userId))
            {
                displayBookings = await BookingService.GetBookingsByUserIdAsync(userId);
                // Set the user ID in the new booking object for non-admin users
                newBooking.UserId = userId;
            }
        }
        
        await LoadFestivalTickets();
        UpdateAvailableTicketTypes();
        FilterBookings();
    }

    private void UpdateAvailableTicketTypes()
    {
        availableTicketTypes = displayBookings
            .Select(b => b.TicketType)
            .Where(t => !string.IsNullOrEmpty(t))
            .Distinct()
            .OrderBy(t => t)
            .ToList();
    }

    private void FilterBookings()
    {
        var filtered = displayBookings.Where(booking =>
            (string.IsNullOrEmpty(SelectedUser) || booking.UserEmail.Equals(SelectedUser, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(SelectedFestival) || booking.FestivalName.Contains(SelectedFestival, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(SelectedTicketType) || booking.TicketType.Contains(SelectedTicketType, StringComparison.OrdinalIgnoreCase))
        );

        filteredBookings = SortOrder switch
        {
            "date_asc" => filtered.OrderBy(b => b.FestivalStartDate).ToList(),
            "date_desc" => filtered.OrderByDescending(b => b.FestivalStartDate).ToList(),
            "festival_asc" => filtered.OrderBy(b => b.FestivalName).ToList(),
            "festival_desc" => filtered.OrderByDescending(b => b.FestivalName).ToList(),
            "price_asc" => filtered.OrderBy(b => b.TicketPrice).ToList(),
            "price_desc" => filtered.OrderByDescending(b => b.TicketPrice).ToList(),
            _ => filtered.ToList()
        };
        // Build unique groups (UserId + FestivalId + TicketId)
        uniqueFilteredBookings = filteredBookings
            .GroupBy(b => new { b.UserId, b.FestivalId, b.TicketId })
            .Select(g => g.First())
            .ToList();

        ApplyPaging();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        SelectedUser = string.Empty;
        SelectedFestival = string.Empty;
        SelectedTicketType = string.Empty;
        SortOrder = string.Empty;
        FilterBookings();
    }

    private string GetResultsMessage()
    {
        var result = $"Found {filteredBookings.Count} of {displayBookings.Count} bookings";
        if (!string.IsNullOrEmpty(SortOrder))
        {
            result += $" | Sorted by {GetSortDescription(SortOrder)}";
        }
        return result;
    }

    private string GetSortDescription(string sortOrder)
    {
        return sortOrder switch
        {
            "date_asc" => "Date (Earliest First)",
            "date_desc" => "Date (Latest First)",
            "festival_asc" => "Festival A-Z",
            "festival_desc" => "Festival Z-A",
            "price_asc" => "Price (Low to High)",
            "price_desc" => "Price (High to Low)",
            _ => "Default"
        };
    }

    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task AddBooking(BookingCreateDto bookingDto)
    {
        try
        {
            ClearMessages();
            if (!isAdmin)
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (int.TryParse(userId, out int userIdInt))
                {
                    bookingDto.UserId = userIdInt;
                }
            }

            await BookingService.CreateBookingAsync(bookingDto);
            successMessage = "Booking created successfully.";
            await LoadData();

            // Reset the form but preserve user ID for non-admin users
            var currentUserId = newBooking.UserId;
            newBooking = new BookingCreateDto();
            if (!isAdmin)
            {
                newBooking.UserId = currentUserId;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task OnFestivalChanged(int festivalId)
    {
        ClearMessages();
        newBooking.FestivalId = festivalId;
        newBooking.TicketId = 0;
        
        if (festivalId > 0)
        {
            availableTickets = await TicketService.GetTicketsByFestivalIdAsync(festivalId);
        }
        else
        {
            availableTickets = new List<TicketGetDto>();
        }
        
        StateHasChanged();
    }

    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private async Task LoadFestivalTickets()
    {
        festivalTickets.Clear();
        
        // Get unique festival IDs from bookings
        var festivalIds = displayBookings.Select(b => b.FestivalId).Distinct().ToList();
        
        // Load tickets for each festival
        foreach (var festivalId in festivalIds)
        {
            var tickets = await TicketService.GetTicketsByFestivalIdAsync(festivalId);
            festivalTickets[festivalId] = tickets;
        }
    }

    private async Task HandleStartEdit(BookingGetDto booking)
    {
        editingBookingId = booking.Id;
        StateHasChanged();
    }

    private async Task HandleSaveEdit((int bookingId, int newTicketId, int newQuantity) editData)
    {
        try
        {
            await BookingService.UpdateBookingDetailsAsync(editData.bookingId, editData.newTicketId, editData.newQuantity);
            editingBookingId = null;
            await LoadData();
        }
        catch (Exception ex)
        {
            // Handle error - could add error message display
            Console.WriteLine($"Error updating booking: {ex.Message}");
        }
    }

    private void HandleCancelEdit()
    {
        editingBookingId = null;
        StateHasChanged();
    }

    private async Task DeleteBooking(int bookingId)
    {
        // Delete entire group (same user + festival + ticket)
        await BookingService.DeleteBookingGroupAsync(bookingId);
        await LoadData();
    }

    // Pagination
    private int currentPage = 1;
    private int pageSize = 6;

    private int TotalPages => Math.Max(1, (int)Math.Ceiling((uniqueFilteredBookings?.Count ?? 0) / (double)pageSize));

    private void ApplyPaging()
    {
        pagedBookings = (uniqueFilteredBookings ?? new List<BookingGetDto>())
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void GoPrev()
    {
        if (currentPage > 1)
        {
            currentPage--;
            ApplyPaging();
        }
    }

    private void GoNext()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
            ApplyPaging();
        }
    }
} 