@using ShowTime.BusinessLogic.Dtos
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations

<div class="col-lg-4 col-md-6">
    <div class="card artist-card">
        <img class="artist-image" src="@Artist.Image" alt="@Artist.Name" 
             onerror="this.src='https://via.placeholder.com/400x250/667eea/white?text=No+Image'" />
        <div class="artist-info">
            @if (IsEditing)
            {
                <!-- Edit Mode -->
                <div class="edit-mode">
                    <h6 class="edit-title">‚úèÔ∏è Edit Artist</h6>
                    <EditForm Model="UpdateArtist" OnValidSubmit="HandleSaveEdit" FormName="@($"UpdateArtistForm_{Artist.Id}")">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label class="form-label">üé§ Name</label>
                            <InputText @bind-Value="UpdateArtist.Name" class="form-control"/>
                            <ValidationMessage For="@(() => UpdateArtist.Name)" class="text-warning fw-bold" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">üéµ Genre</label>
                            <InputText @bind-Value="UpdateArtist.Genre" class="form-control"/>
                            <ValidationMessage For="@(() => UpdateArtist.Genre)" class="text-warning fw-bold" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">üñºÔ∏è Image URL</label>
                            <InputText @bind-Value="UpdateArtist.Image" class="form-control"/>
                            <ValidationMessage For="@(() => UpdateArtist.Image)" class="text-warning fw-bold" />
                        </div>
                        <div class="edit-actions">
                            <button type="submit" class="btn-save">
                                <i class="fas fa-check"></i> Save
                            </button>
                            <button type="button" class="btn-cancel" @onclick="HandleCancelEdit">
                                <i class="fas fa-times"></i> Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
            else
            {
                <!-- Display Mode -->
                <h5 class="artist-name">@Artist.Name</h5>
                <span class="genre-badge">@Artist.Genre</span>
            }
        </div>
        
        <!-- Action Buttons - ROLE-BASED -->
        <div class="action-buttons">
            <AuthorizeView Roles="Administrator">
                <Authorized Context="authContext">
                    @if (!IsEditing)
                    {
                        <button class="btn btn-edit" @onclick="OnStartEdit">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                    }
                    <button class="btn btn-delete" @onclick="OnDelete">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
</div>

@code {
    [Parameter] public ArtistGetDto Artist { get; set; } = new();
    [Parameter] public bool IsEditing { get; set; } = false;
    [Parameter] public EventCallback OnStartEdit { get; set; }
    [Parameter] public EventCallback<ArtistUpdateDto> OnSaveEdit { get; set; }
    [Parameter] public EventCallback OnCancelEdit { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    
    private ArtistUpdateDto UpdateArtist { get; set; } = new();
    
    protected override void OnParametersSet()
    {
        if (IsEditing)
        {
            UpdateArtist = new ArtistUpdateDto
            {
                Id = Artist.Id,
                Name = Artist.Name,
                Genre = Artist.Genre,
                Image = Artist.Image
            };
        }
    }
    
    private async Task HandleSaveEdit()
    {
        await OnSaveEdit.InvokeAsync(UpdateArtist);
    }
    
    private async Task HandleCancelEdit()
    {
        await OnCancelEdit.InvokeAsync();
    }
} 