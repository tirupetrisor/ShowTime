@using ShowTime.BusinessLogic.Dtos
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization

<div class="col-lg-4 col-md-6">
    <div class="card ticket-card">
        <div class="ticket-header">
            <h5 class="ticket-festival">üé™ @Ticket.FestivalName</h5>
            <span class="ticket-type-badge">@Ticket.Type</span>
        </div>
        <div class="ticket-info">
            <div class="ticket-price">
                <span class="price-label">üí∞ Price:</span>
                <span class="price-amount">$@Ticket.Price</span>
            </div>
            @if (IsAdmin)
            {
                <div class="ticket-capacity">
                    <span class="price-label">üì¶ Capacity:</span>
                    <span class="price-amount">@Ticket.Capacity</span>
                </div>
            }
            @if (Festival != null && !IsAdmin)
            {
                <div class="ticket-details">
                    <p class="festival-date">üìÖ @Festival.StartDate.ToString("MMM dd, yyyy")</p>
                    <p class="festival-location">üìç @Festival.Location</p>
                </div>
            }
            
            <!-- Edit Form - ONLY FOR ADMINISTRATORS -->
            <AuthorizeView Roles="Administrator">
                <Authorized Context="authContext">
                    @if (IsEditing)
                    {
                        <TicketEditForm Ticket="@Ticket" OnSave="OnSaveEdit" OnCancel="OnCancelEdit" />
                    }
                </Authorized>
            </AuthorizeView>
        </div>
        
        <!-- Action Buttons - ROLE-BASED -->
        <div class="action-buttons">
            <AuthorizeView Roles="Administrator">
                <Authorized Context="authContext">
                    @if (!IsEditing)
                    {
                        <button class="btn btn-edit" @onclick="OnStartEdit">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                    }
                    <button class="btn btn-delete" @onclick="OnDelete">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                </Authorized>
            </AuthorizeView>

            <AuthorizeView>
                <Authorized Context="authCtx">
                    @if (!IsAdmin)
                    {
                        if (Festival != null && Festival.EndDate.Date < DateTime.Today)
                        {
                            <div class="ended-message">This event has ended. Tickets are no longer available.</div>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="AddToCart">
                                <i class="fas fa-cart-plus"></i> Add to Cart
                            </button>
                        }
                    }
                </Authorized>
            </AuthorizeView>
            @if (!string.IsNullOrEmpty(localMessage))
            {
                <div class="text-success" style="font-weight:600;">@localMessage</div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public TicketGetDto Ticket { get; set; } = new();
    [Parameter] public FestivalGetDto Festival { get; set; } = new();
    [Parameter] public bool IsAdmin { get; set; } = false;
    [Parameter] public bool IsEditing { get; set; } = false;
    [Parameter] public EventCallback OnStartEdit { get; set; }
    [Parameter] public EventCallback<TicketUpdateDto> OnSaveEdit { get; set; }
    [Parameter] public EventCallback OnCancelEdit { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }

    [Inject] private ShowTime.Services.CartService Cart { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    private string localMessage = string.Empty;

    private async Task AddToCart()
    {
        try
        {
            await Cart.AddAsync(Ticket.Id, 1);
            Snackbar.Add($"Added {Ticket.Type} - {Festival?.Name ?? Ticket.FestivalName} to cart", Severity.Success);
            localMessage = "Added to cart";
            StateHasChanged();
            _ = Task.Run(async () =>
            {
                await Task.Delay(2500);
                localMessage = string.Empty;
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Add to cart failed: {ex.Message}");
            Snackbar.Add(ex.Message, Severity.Error);
            localMessage = ex.Message;
            StateHasChanged();
            _ = Task.Run(async () =>
            {
                await Task.Delay(2500);
                localMessage = string.Empty;
                await InvokeAsync(StateHasChanged);
            });
        }
    }
} 