@using ShowTime.BusinessLogic.Dtos
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using System.Linq

@if (IsVisible)
{
    <div class="reviews-modal-overlay" @onclick="OnClose">
        <div class="reviews-modal-container" @onclick:stopPropagation="true">
            <!-- Modern Header -->
            <div class="reviews-modal-header">
                <div class="header-content">
                    <div class="header-icon">
                        <i class="fa-solid fa-comments"></i>
                    </div>
                    <div class="header-text">
                        <h3 class="modal-title">@Festival.Name</h3>
                        <p class="modal-subtitle">Reviews</p>
                    </div>
                </div>
                <button type="button" class="close-btn" @onclick="OnClose">
                    <i class="fa-solid fa-xmark"></i>
                </button>
            </div>

            <!-- Modal Body -->
            <div class="reviews-modal-body">
                <!-- Add Review Section (for authenticated non-admin users) -->
                <AuthorizeView>
                    <Authorized Context="authUserCtx">
                        <AuthorizeView Roles="Administrator">
                            <NotAuthorized Context="nonAdminCtx">
                                <div class="add-review-section">
                                    <div class="add-form">
                                        <div class="form-group rating-group">
                                            <label>Your Rating</label>
                                            <div class="rating-input">
                                                @for (var i = 1; i <= 5; i++)
                                                {
                                                    var idx = i; // capture per-iteration value to avoid closure issue
                                                    if (i <= newReviewRating)
                                                    {
                                                        <span class="star-input filled" @onclick="@(() => SetRating(idx))" title="@i">★</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="star-input" @onclick="@(() => SetRating(idx))" title="@i">☆</span>
                                                    }
                                                }
                                                <span class="rating-value">(@newReviewRating)</span>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label>Comment (optional)</label>
                                            <textarea @bind="newReviewComment" maxlength="2000" rows="3" class="custom-input" placeholder="Share your experience..."></textarea>
                                        </div>
                                        <div class="form-actions center">
                                            <button type="button" class="add-btn" @onclick="SubmitReview">
                                                <i class="fa-solid fa-paper-plane"></i>
                                                Submit
                                            </button>
                                        </div>
                                        @if (!string.IsNullOrEmpty(errorMessage))
                                        {
                                            <div class="text-warning fw-bold mt-1">@errorMessage</div>
                                        }
                                    </div>
                                </div>
                            </NotAuthorized>
                        </AuthorizeView>
                    </Authorized>
                </AuthorizeView>

                <!-- Reviews List Section -->
                <div class="reviews-section">
                    <div class="section-header">
                        <h5><i class="fa-solid fa-list"></i> Recent Reviews</h5>
                    </div>
                    @if (Reviews != null && Reviews.Any())
                    {
                        <div class="reviews-list">
                            @foreach (var review in GetPagedReviews())
                            {
                                <div class="review-card">
                                    <div class="review-content">
                                        <div class="review-header">
                                            <div class="review-user">@review.UserEmail</div>
                                            <div class="review-date">@review.CreatedAt.ToLocalTime().ToString("g")</div>
                                        </div>
                                        <div class="review-rating">
                                            @for (var i = 1; i <= 5; i++)
                                            {
                                                if (i <= review.Rating)
                                                {
                                                    <span class="star filled">★</span>
                                                }
                                                else
                                                {
                                                    <span class="star">☆</span>
                                                }
                                            }
                                        </div>
                                        @if (!string.IsNullOrWhiteSpace(review.Comment))
                                        {
                                            <div class="review-comment">@review.Comment</div>
                                        }
                                        <AuthorizeView Roles="Administrator">
                                            <Authorized>
                                                <div class="review-actions">
                                                    <button type="button" class="remove-btn" @onclick="() => DeleteReview(review.Id)" title="Delete review">
                                                        <i class="fa-solid fa-trash"></i>
                                                    </button>
                                                </div>
                                            </Authorized>
                                        </AuthorizeView>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="pagination-bar">
                            <div class="page-controls">
                                <button type="button" class="page-btn" @onclick="GoPrev" disabled="@(currentPage <= 1)">
                                    <i class="fa-solid fa-chevron-left"></i>
                                </button>
                                <span class="page-info">Page @currentPage of @TotalPages</span>
                                <button type="button" class="page-btn" @onclick="GoNext" disabled="@(currentPage >= TotalPages)">
                                    <i class="fa-solid fa-chevron-right"></i>
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fa-solid fa-comments"></i>
                            <p>No reviews yet</p>
                            <span>Be the first to share your thoughts!</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public FestivalGetDto Festival { get; set; } = new();
    [Parameter] public IList<ReviewGetDto> Reviews { get; set; } = new List<ReviewGetDto>();
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<ReviewCreateDto> OnAddReview { get; set; }
    [Parameter] public EventCallback<int> OnDeleteReview { get; set; }

    private int newReviewRating = 5;
    private string newReviewComment = string.Empty;
    private string errorMessage = string.Empty;
    private int currentPage = 1;
    private int pageSize = 6;

    private void SetRating(int rating)
    {
        newReviewRating = rating;
    }

    private int TotalPages => Math.Max(1, (int)Math.Ceiling((Reviews?.Count ?? 0) / (double)pageSize));

    private IEnumerable<ReviewGetDto> GetPagedReviews()
    {
        var items = Reviews ?? new List<ReviewGetDto>();
        return items.Skip((currentPage - 1) * pageSize).Take(pageSize);
    }

    private void GoPrev()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void GoNext()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
        }
    }

    protected override void OnParametersSet()
    {
        if (currentPage > TotalPages) currentPage = TotalPages;
        if (currentPage < 1) currentPage = 1;
    }

    private async Task SubmitReview()
    {
        errorMessage = string.Empty;
        if (newReviewRating < 1 || newReviewRating > 5)
        {
            errorMessage = "Rating must be between 1 and 5.";
            return;
        }
        var dto = new ReviewCreateDto
        {
            FestivalId = Festival.Id,
            Rating = newReviewRating,
            Comment = newReviewComment?.Trim() ?? string.Empty
        };
        await OnAddReview.InvokeAsync(dto);
        newReviewRating = 5;
        newReviewComment = string.Empty;
    }

    private async Task DeleteReview(int reviewId)
    {
        await OnDeleteReview.InvokeAsync(reviewId);
    }
}


