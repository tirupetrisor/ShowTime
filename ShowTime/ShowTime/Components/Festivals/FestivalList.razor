@using ShowTime.BusinessLogic.Dtos
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization



@if (AllFestivals.Count == 0)
{
    <div class="text-center py-4">No festivals available.</div>
}
else
{
    <div class="row">
        @foreach (var festival in FilteredFestivals)
        {
            <FestivalCard Festival="@festival" 
                         IsEditing="@(EditingFestivalId == festival.Id)"
                         OnStartEdit="@(() => OnStartEdit.InvokeAsync(festival))"
                         OnSaveEdit="@((updateDto) => OnSaveEdit.InvokeAsync(updateDto))"
                         OnCancelEdit="@(() => OnCancelEdit.InvokeAsync())"
                         OnDelete="@(() => OnDeleteFestival.InvokeAsync(festival.Id))"
                         OnViewLineup="@(() => OnViewLineup.InvokeAsync(festival))"
                         OnViewTickets="@(() => OnViewTickets.InvokeAsync(festival))"
                         OnViewMap="@(() => OnViewMap.InvokeAsync(festival))"
                         OnViewReviews="@(() => OnViewReviews.InvokeAsync(festival))" />
        }
    </div>
}

@code {
    [Parameter] public IList<FestivalGetDto> AllFestivals { get; set; } = new List<FestivalGetDto>();
    [Parameter] public IList<FestivalGetDto> FilteredFestivals { get; set; } = new List<FestivalGetDto>();
    [Parameter] public int? EditingFestivalId { get; set; }
    [Parameter] public EventCallback<FestivalGetDto> OnStartEdit { get; set; }
    [Parameter] public EventCallback<FestivalUpdateDto> OnSaveEdit { get; set; }
    [Parameter] public EventCallback OnCancelEdit { get; set; }
    [Parameter] public EventCallback<int> OnDeleteFestival { get; set; }
    [Parameter] public EventCallback<FestivalGetDto> OnViewLineup { get; set; }
    [Parameter] public EventCallback<FestivalGetDto> OnViewTickets { get; set; }
    [Parameter] public EventCallback<FestivalGetDto> OnViewMap { get; set; }
    [Parameter] public EventCallback<FestivalGetDto> OnViewReviews { get; set; }
} 